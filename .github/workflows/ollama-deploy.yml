name: Deploy Ollama Server

on:
  push:
    branches: [ main ]
    paths:
      - 'ollama-server/**'
  workflow_dispatch:

env:
  PROJECT_ID: ai-avatar-451519
  REGION: us-central1
  SERVICE_NAME: ollama-gemma
  REPOSITORY: ollama-repo
  IMAGE_NAME: ollama-gemma

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ env.PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true
        
    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev
      
    - name: Build and push with Cloud Build
      run: |
        gcloud builds submit ./ollama-server \
          --tag ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          --machine-type e2-highcpu-32
        
        gcloud builds submit ./ollama-server \
          --tag ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:latest \
          --machine-type e2-highcpu-32
        
    - name: Deploy to Cloud Run
      run: |
        gcloud beta run deploy ${{ env.SERVICE_NAME }} \
          --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:latest \
          --platform managed \
          --region ${{ env.REGION }} \
          --concurrency 4 \
          --cpu 8 \
          --set-env-vars OLLAMA_NUM_PARALLEL=4 \
          --gpu 1 \
          --gpu-type nvidia-l4 \
          --max-instances 1 \
          --memory 32Gi \
          --no-allow-unauthenticated \
          --no-cpu-throttling \
          --timeout 600s \
          --port 11434
          
    - name: Show deployed service URL
      run: |
        echo "Deployed to: $(gcloud run services describe ${{ env.SERVICE_NAME }} --platform managed --region ${{ env.REGION }} --format 'value(status.url)')"
        echo "Image: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:latest"
