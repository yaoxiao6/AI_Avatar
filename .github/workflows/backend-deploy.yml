# .github/workflows/backend-deploy.yml

name: Deploy Backend Services

on:
  push:
    branches: [ main ]
    paths:
      - 'flask-rag/**'
      - 'node-backend/**'
      - 'ollama-server/**'
      - 'terraform/**'
      - 'event-driven-functions/**'
      - 'scripts/**'
      - '.github/workflows/backend-deploy.yml'
  workflow_dispatch:  # Allow manual triggers

env:
  PROJECT_ID: ai-avatar-451519
  REGION: us-east1

jobs:
  deploy-backend:
    name: Build and Deploy Backend Services
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ env.PROJECT_ID }}
        install_components: 'gke-gcloud-auth-plugin'

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Configure Docker for GCR
      run: gcloud auth configure-docker

    - name: Build and Push Flask RAG Docker Image
      run: |
        cd flask-rag
        docker build --platform linux/amd64 -t gcr.io/$PROJECT_ID/flask-rag:latest .
        docker push gcr.io/$PROJECT_ID/flask-rag:latest
        cd ..

    - name: Build and Push Node Backend Docker Image
      run: |
        cd node-backend
        docker build --platform linux/amd64 -t gcr.io/$PROJECT_ID/node-backend:latest .
        docker push gcr.io/$PROJECT_ID/node-backend:latest
        cd ..

    - name: Build and Push Ollama Docker Image
      run: |
        cd ollama-server
        docker build --platform linux/amd64 -t gcr.io/$PROJECT_ID/ollama:latest .
        docker push gcr.io/$PROJECT_ID/ollama:latest
        cd ..

    - name: Prepare and Upload Function Source
      run: |
        # Make script executable
        chmod +x scripts/prepare_function.sh
        # Run script to prepare and upload function source
        ./scripts/prepare_function.sh ${{ env.PROJECT_ID }} ${{ env.REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0

    - name: Initialize Terraform
      run: |
        cd terraform
        terraform init

    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan -no-color

    - name: Terraform Apply
      run: |
        cd terraform
        # Handle App Engine application in state
        terraform state list | grep -q "google_app_engine_application.app" && terraform state rm google_app_engine_application.app || true
        
        # Taint Cloud Run services to force recreation
        terraform taint google_cloud_run_service.flask_rag || true
        terraform taint google_cloud_run_service.node_backend || true
        terraform taint google_cloud_run_service.ollama || true
        
        terraform apply -auto-approve