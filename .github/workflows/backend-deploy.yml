# AI_Avatar/.github/workflows/backend-deploy.yml

name: Deploy Backend Services

on:
  push:
    branches: [ main ]
    paths:
      - 'flask-rag/**'
      - 'node-backend/**'
      - 'ollama-server/**'
      - 'terraform/**'
      - '.github/workflows/backend-deploy.yml'
  workflow_dispatch:  # Allow manual triggers

env:
  PROJECT_ID: ai-avatar-451519
  REGION: us-central1
  GKE_CLUSTER_NAME: ollama-cluster

jobs:
  deploy-backend:
    name: Build and Deploy Backend Services
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ env.PROJECT_ID }}
        install_components: 'gke-gcloud-auth-plugin'

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Configure Docker for GCR
      run: gcloud auth configure-docker

    - name: Build and Push Flask RAG Docker Image
      run: |
        cd flask-rag
        docker build --platform linux/amd64 -t gcr.io/$PROJECT_ID/flask-rag:latest .
        docker push gcr.io/$PROJECT_ID/flask-rag:latest
        cd ..

    - name: Build and Push Node Backend Docker Image
      run: |
        cd node-backend
        docker build --platform linux/amd64 -t gcr.io/$PROJECT_ID/node-backend:latest .
        docker push gcr.io/$PROJECT_ID/node-backend:latest
        cd ..

    # - name: Build and Push Ollama Docker Image # It hardly update. Prefer do it manually
    #   run: |
    #     cd ollama-server
    #     docker build --platform linux/amd64 -t gcr.io/$PROJECT_ID/ollama:latest .
    #     docker push gcr.io/$PROJECT_ID/ollama:latest
    #     cd ..

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0

    - name: Initialize Terraform
      run: |
        cd terraform
        terraform init

    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan -no-color

    - name: Terraform Apply
      run: |
        cd terraform
        # Handle App Engine application in state
        terraform state list | grep -q "google_app_engine_application.app" && terraform state rm google_app_engine_application.app || true
        
        # If migrating from Cloud Run to GKE, remove old Cloud Run service
        terraform state list | grep -q "google_cloud_run_service.ollama" && terraform state rm google_cloud_run_service.ollama || true
        terraform state list | grep -q "google_cloud_run_service_iam_policy.ollama_noauth" && terraform state rm google_cloud_run_service_iam_policy.ollama_noauth || true
        
        # Taint Cloud Run services to force recreation
        terraform taint google_cloud_run_service.flask_rag || true
        terraform taint google_cloud_run_service.node_backend || true
        
        terraform apply -auto-approve
    
    - name: Verify GKE Deployment
      run: |
        # Get GKE cluster credentials
        gcloud container clusters get-credentials $GKE_CLUSTER_NAME --region $REGION --project $PROJECT_ID
        
        # Check Ollama pod status
        kubectl get pods -l app=ollama
        
        # Check if service is available
        kubectl get service ollama-service
        
        # Output Ollama External IP
        echo "Ollama Service External IP: $(cd terraform && terraform output -raw ollama_external_ip)"

